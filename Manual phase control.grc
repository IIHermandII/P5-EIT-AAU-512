options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: Manual_phase_control
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Manual phase control
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: Freq
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 'Tabs@0 : 0,0,1,1'
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: int
    start: int(2.4e9)
    step: int(1e6)
    stop: int(2.48e9)
    value: int(2.4e9)
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [456, 12.0]
    rotation: 0
    state: true
- name: Gain
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 'Tabs@0 : 1,0,1,1'
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: int
    start: '0'
    step: '1'
    stop: '80'
    value: '0'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [328, 12.0]
    rotation: 0
    state: true
- name: Phase_Delta
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 'Tabs@1 : 0,1,1,5'
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '-180'
    step: '1'
    stop: '180'
    value: '0'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [160, 396.0]
    rotation: 0
    state: true
- name: RX1
  id: variable_qtgui_label
  parameters:
    comment: ''
    formatter: None
    gui_hint: 'Tabs@1 : 1,0,1,1'
    label: ''
    type: real
    value: ((Phase_Delta*0+Rx1_Cal) % 360)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 528.0]
    rotation: 0
    state: true
- name: RX2
  id: variable_qtgui_label
  parameters:
    comment: ''
    formatter: None
    gui_hint: 'Tabs@1 : 2,0,1,1'
    label: ''
    type: real
    value: ((Phase_Delta*1+Rx2_Cal) % 360)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 656.0]
    rotation: 0
    state: true
- name: RX3
  id: variable_qtgui_label
  parameters:
    comment: ''
    formatter: None
    gui_hint: 'Tabs@1 : 3,0,1,1'
    label: ''
    type: real
    value: ((Phase_Delta*2+Rx3_Cal) % 360)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 784.0]
    rotation: 0
    state: true
- name: RX4
  id: variable_qtgui_label
  parameters:
    comment: ''
    formatter: None
    gui_hint: 'Tabs@1 : 4,0,1,1'
    label: ''
    type: real
    value: ((Phase_Delta*3+Rx4_Cal) % 360)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 912.0]
    rotation: 0
    state: true
- name: Rx1_Cal
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 'Tabs@1 : 1,1,1,5'
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: '360'
    value: '0'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [160, 524.0]
    rotation: 0
    state: true
- name: Rx2_Cal
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 'Tabs@1 : 2,1,1,5'
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: '360'
    value: '0'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [160, 652.0]
    rotation: 0
    state: true
- name: Rx3_Cal
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 'Tabs@1 : 3,1,1,5'
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: '360'
    value: '0'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [160, 780.0]
    rotation: 0
    state: true
- name: Rx4_Cal
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 'Tabs@1 : 4,1,1,5'
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: '360'
    value: '0'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [160, 908.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: int(5e6)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [208, 8.0]
    rotation: 0
    state: enabled
- name: Tabs
  id: qtgui_tab_widget
  parameters:
    alias: ''
    comment: ''
    gui_hint: 1,0,1,1
    label0: RF control
    label1: Phase control
    label10: Tab 10
    label11: Tab 11
    label12: Tab 12
    label13: Tab 13
    label14: Tab 14
    label15: Tab 15
    label16: Tab 16
    label17: Tab 17
    label18: Tab 18
    label19: Tab 19
    label2: Tab 2
    label3: Tab 3
    label4: Tab 4
    label5: Tab 5
    label6: Tab 6
    label7: Tab 7
    label8: Tab 8
    label9: Tab 9
    num_tabs: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 108.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    PhaseDelta: Phase_Delta
    Rx1_Phase_Cal: Rx1_Cal
    Rx2_Phase_Cal: Rx2_Cal + 31
    Rx3_Phase_Cal: Rx3_Cal + 355
    Rx4_Phase_Cal: Rx4_Cal + 20
    SignalFreq: Freq
    UpdateRate: '0.1'
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\nfrom ctypes import *\n\
      import numpy as np\nfrom gnuradio import gr\nimport time\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Embedded Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,\
      \ UpdateRate = 1, PhaseDelta=45, SignalFreq=1, Rx1_Phase_Cal=0, Rx2_Phase_Cal=0,\
      \ Rx3_Phase_Cal=0, Rx4_Phase_Cal=0):  # only default arguments here\n      \
      \  \"\"\"arguments to this function show up as parameters in GRC\"\"\"\n   \
      \     gr.sync_block.__init__(\n            self,\n            name='Calculate\
      \ Steering Angle',   # will show up in GRC\n            in_sig=[],   # we have\
      \ no flowgraph inputs to this block\n            out_sig=[np.float32]   # we\
      \ have one flowgraph output, which is the calculated steering angle\n      \
      \  )\n        # this module will be imported in the into your flowgraph\n  \
      \      \n        self.vnx = cdll.LoadLibrary(r\"C:\\Users\\julm\\Desktop\\Drone\
      \ detection\\VNX_dps64.dll\")\n        self.vnx.fnLPS_SetTestMode(False)   \
      \     # Use actual devices\n        self.DeviceIDArray = c_int * 20\n      \
      \  self.Devices = self.DeviceIDArray()           # This array will hold the\
      \ list of device handles returned by the DLL\n\n        print('------- Initialize\
      \ Lab Bricks -------')\n        # GetNumDevices will determine how many LPS\
      \ devices are availible\n        self.numDevices = self.vnx.fnLPS_GetNumDevices()\n\
      \        print(str(self.numDevices), ' device(s) found')\n\n        # GetDevInfo\
      \ generates a list, stored in the devices array, of\n        # every availible\
      \ LPS device attached to the system\n        # GetDevInfo will return the number\
      \ of device handles in the array\n        dev_info = self.vnx.fnLPS_GetDevInfo(self.Devices)\n\
      \        print('GetDevInfo returned', str(dev_info))\n        self.ser_num =\
      \ []\n        # GetSerialNumber will return the devices serial number\n    \
      \    for i in range(self.numDevices):\n            self.ser_num.append(self.vnx.fnLPS_GetSerialNumber(self.Devices[i]))\n\
      \            print('Serial number:', str(self.ser_num[i]))\n\n            #InitDevice\
      \ will prepare the device for operation\n            init_dev = self.vnx.fnLPS_InitDevice(self.Devices[i])\n\
      \            print('InitDevice returned', str(init_dev))\n        print('----------\
      \ End initialize -----------')\n\n        # print('----------- Device specs\
      \ ------------')\n        # # These functions will get the working frequency\
      \ range of the LPS device\n        # # and those frequencies will be turned\
      \ into MHz\n        # min_freq = self.vnx.fnLPS_GetMinWorkingFrequency(self.Devices[0])\n\
      \        # max_freq = self.vnx.fnLPS_GetMaxWorkingFrequency(self.Devices[0])\n\
      \        # min_working_freq_in_MHz = int(min_freq / 10)\n        # max_working_freq_in_MHz\
      \ = int(max_freq / 10)\n        # print('Minimum working frequency for LPS device\
      \ in MHz:', min_working_freq_in_MHz)\n        # print('Maximum working frequency\
      \ for LPS device in MHz:', max_working_freq_in_MHz)\n\n        # # These functions\
      \ get the minimum and maximum phase shift for the LPS device\n        # max_angle\
      \ = self.vnx.fnLPS_GetMaxPhaseShift(self.Devices[0])\n        # min_angle =\
      \ self.vnx.fnLPS_GetMinPhaseShift(self.Devices[0])\n        # # This function\
      \ gives the smallest increment by which the phase shift can be changed\n   \
      \     # min_step = self.vnx.fnLPS_GetMinPhaseStep(self.Devices[0])\n       \
      \ # print('Minimum phase shift that the Lab Brick is capable of, in degrees:',\
      \ min_angle)\n        # print('Maximum phase shift that the Lab Brick is capable\
      \ of, in degrees:', max_angle)\n        # print('Smallest phase shift increment\
      \ that the Lab Brick is capable of, in degrees:', min_step)\n        # print('-------------\
      \ End specs -------------')\n        \n        # if an attribute with the same\
      \ name as a parameter is found,\n        # a callback is registered (properties\
      \ work, too).\n        self.UpdateRate = UpdateRate\n        self.PhaseDelta\
      \ = PhaseDelta\n        self.Rx1_Phase_Cal = Rx1_Phase_Cal\n        self.Rx2_Phase_Cal\
      \ = Rx2_Phase_Cal\n        self.Rx3_Phase_Cal = Rx3_Phase_Cal\n        self.Rx4_Phase_Cal\
      \ = Rx4_Phase_Cal\n\n        self.c = 3e8\n        self.f = SignalFreq\n   \
      \     self.d = 1/2*(self.c/self.f)\n\n        for i in range(self.numDevices):\n\
      \            result = self.vnx.fnLPS_SetWorkingFrequency(self.Devices[i], int(self.f/\
      \ 100000))\n            if result != 0:\n                print('SetFrequency\
      \ returned', result)\n\n    def work(self, input_items, output_items):\n   \
      \     # steering angle theta = arcsin(c*deltaphase/(2*pi*f*d)\n        value1\
      \ = (self.c * np.radians(np.abs(self.PhaseDelta)))/(2*np.pi*self.f*self.d)\n\
      \        clamped_value1 = max(min(1, value1), -1)     #arcsin argument must\
      \ be between 1 and -1, or numpy will throw a warning\n        theta = np.degrees(np.arcsin(clamped_value1))\n\
      \        \n        RxPhase1 = (self.PhaseDelta*0+self.Rx1_Phase_Cal) % 360\n\
      \        RxPhase2 = (self.PhaseDelta*1+self.Rx2_Phase_Cal) % 360\n        RxPhase3\
      \ = (self.PhaseDelta*2+self.Rx3_Phase_Cal) % 360\n        RxPhase4 = (self.PhaseDelta*3+self.Rx4_Phase_Cal)\
      \ % 360\n        \n        for i in range(self.numDevices):\n            match\
      \ self.ser_num[i]:\n                case 24780:\n                    result_1\
      \ = self.vnx.fnLPS_SetPhaseAngle(self.Devices[i], int(RxPhase1))\n         \
      \           if result_1 != 0:\n                        print('SetPhaseAngle\
      \ returned error', result_1)\n                case 24781:\n                \
      \    result_1 = self.vnx.fnLPS_SetPhaseAngle(self.Devices[i], int(RxPhase2))\n\
      \                    if result_1 != 0:\n                        print('SetPhaseAngle\
      \ returned error', result_1)\n                case 24783:\n                \
      \    result_1 = self.vnx.fnLPS_SetPhaseAngle(self.Devices[i], int(RxPhase3))\n\
      \                    if result_1 != 0:\n                        print('SetPhaseAngle\
      \ returned error', result_1)\n                case 24784: \n               \
      \     result_1 = self.vnx.fnLPS_SetPhaseAngle(self.Devices[i], int(RxPhase4))\n\
      \                    if result_1 != 0:\n                        print('SetPhaseAngle\
      \ returned error', result_1)\n                case _:\n                    print(\"\
      FUCK\")\n\n        if self.PhaseDelta>=0:\n            SteerAngle = 90-theta\
      \   # positive PhaseDelta covers 0deg to 90 deg\n        else:\n           \
      \ SteerAngle = 90+theta # negative phase delta covers 0 deg to -90 deg\n   \
      \     \n        time.sleep(self.UpdateRate)\n\n        output_items[0][:] =\
      \ SteerAngle * (-1) + 90\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Calculate Steering Angle', 'blk', [('UpdateRate', '1'), ('PhaseDelta',
      '45'), ('SignalFreq', '1'), ('Rx1_Phase_Cal', '0'), ('Rx2_Phase_Cal', '0'),
      ('Rx3_Phase_Cal', '0'), ('Rx4_Phase_Cal', '0')], [], [('0', 'float', 1)], 'Embedded
      Python Block example - a simple multiply const', ['PhaseDelta', 'Rx1_Phase_Cal',
      'Rx2_Phase_Cal', 'Rx3_Phase_Cal', 'Rx4_Phase_Cal', 'UpdateRate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1024, 336.0]
    rotation: 0
    state: true
- name: low_pass_filter_0
  id: low_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    cutoff_freq: 100e3
    decim: '1'
    gain: '1'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: fir_filter_ccf
    width: 10e3
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [440, 216.0]
    rotation: 0
    state: true
- name: qtgui_number_sink_0
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'False'
    avg: '0'
    color1: ("black", "black")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_HORIZ
    gui_hint: 2,0,1,1
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: '90'
    min: '-90'
    name: '"Steering angle"'
    nconnections: '1'
    type: float
    unit1: ''
    unit10: ''
    unit2: ''
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1336, 348.0]
    rotation: 0
    state: true
- name: qtgui_sink_x_0
  id: qtgui_sink_x
  parameters:
    affinity: ''
    alias: ''
    bw: samp_rate
    comment: ''
    fc: int(2.44e9)
    fftsize: '1024'
    gui_hint: 0,0,1,1
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '"Measured data from SDR"'
    plotconst: 'True'
    plotfreq: 'True'
    plottime: 'True'
    plotwaterfall: 'True'
    rate: '10'
    showports: 'False'
    showrf: 'False'
    type: complex
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [712, 236.0]
    rotation: 0
    state: true
- name: uhd_usrp_source_0
  id: uhd_usrp_source
  parameters:
    affinity: ''
    alias: ''
    ant0: '"RX2"'
    ant1: '"RX2"'
    ant10: '"RX2"'
    ant11: '"RX2"'
    ant12: '"RX2"'
    ant13: '"RX2"'
    ant14: '"RX2"'
    ant15: '"RX2"'
    ant16: '"RX2"'
    ant17: '"RX2"'
    ant18: '"RX2"'
    ant19: '"RX2"'
    ant2: '"RX2"'
    ant20: '"RX2"'
    ant21: '"RX2"'
    ant22: '"RX2"'
    ant23: '"RX2"'
    ant24: '"RX2"'
    ant25: '"RX2"'
    ant26: '"RX2"'
    ant27: '"RX2"'
    ant28: '"RX2"'
    ant29: '"RX2"'
    ant3: '"RX2"'
    ant30: '"RX2"'
    ant31: '"RX2"'
    ant4: '"RX2"'
    ant5: '"RX2"'
    ant6: '"RX2"'
    ant7: '"RX2"'
    ant8: '"RX2"'
    ant9: '"RX2"'
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: Freq
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dc_offs0: 0+0j
    dc_offs1: 0+0j
    dc_offs10: 0+0j
    dc_offs11: 0+0j
    dc_offs12: 0+0j
    dc_offs13: 0+0j
    dc_offs14: 0+0j
    dc_offs15: 0+0j
    dc_offs16: 0+0j
    dc_offs17: 0+0j
    dc_offs18: 0+0j
    dc_offs19: 0+0j
    dc_offs2: 0+0j
    dc_offs20: 0+0j
    dc_offs21: 0+0j
    dc_offs22: 0+0j
    dc_offs23: 0+0j
    dc_offs24: 0+0j
    dc_offs25: 0+0j
    dc_offs26: 0+0j
    dc_offs27: 0+0j
    dc_offs28: 0+0j
    dc_offs29: 0+0j
    dc_offs3: 0+0j
    dc_offs30: 0+0j
    dc_offs31: 0+0j
    dc_offs4: 0+0j
    dc_offs5: 0+0j
    dc_offs6: 0+0j
    dc_offs7: 0+0j
    dc_offs8: 0+0j
    dc_offs9: 0+0j
    dc_offs_enb0: default
    dc_offs_enb1: default
    dc_offs_enb10: default
    dc_offs_enb11: default
    dc_offs_enb12: default
    dc_offs_enb13: default
    dc_offs_enb14: default
    dc_offs_enb15: default
    dc_offs_enb16: default
    dc_offs_enb17: default
    dc_offs_enb18: default
    dc_offs_enb19: default
    dc_offs_enb2: default
    dc_offs_enb20: default
    dc_offs_enb21: default
    dc_offs_enb22: default
    dc_offs_enb23: default
    dc_offs_enb24: default
    dc_offs_enb25: default
    dc_offs_enb26: default
    dc_offs_enb27: default
    dc_offs_enb28: default
    dc_offs_enb29: default
    dc_offs_enb3: default
    dc_offs_enb30: default
    dc_offs_enb31: default
    dc_offs_enb4: default
    dc_offs_enb5: default
    dc_offs_enb6: default
    dc_offs_enb7: default
    dc_offs_enb8: default
    dc_offs_enb9: default
    dev_addr: '""'
    dev_args: ''
    gain0: Gain
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    gain_type0: default
    gain_type1: default
    gain_type10: default
    gain_type11: default
    gain_type12: default
    gain_type13: default
    gain_type14: default
    gain_type15: default
    gain_type16: default
    gain_type17: default
    gain_type18: default
    gain_type19: default
    gain_type2: default
    gain_type20: default
    gain_type21: default
    gain_type22: default
    gain_type23: default
    gain_type24: default
    gain_type25: default
    gain_type26: default
    gain_type27: default
    gain_type28: default
    gain_type29: default
    gain_type3: default
    gain_type30: default
    gain_type31: default
    gain_type4: default
    gain_type5: default
    gain_type6: default
    gain_type7: default
    gain_type8: default
    gain_type9: default
    iq_imbal0: 0+0j
    iq_imbal1: 0+0j
    iq_imbal10: 0+0j
    iq_imbal11: 0+0j
    iq_imbal12: 0+0j
    iq_imbal13: 0+0j
    iq_imbal14: 0+0j
    iq_imbal15: 0+0j
    iq_imbal16: 0+0j
    iq_imbal17: 0+0j
    iq_imbal18: 0+0j
    iq_imbal19: 0+0j
    iq_imbal2: 0+0j
    iq_imbal20: 0+0j
    iq_imbal21: 0+0j
    iq_imbal22: 0+0j
    iq_imbal23: 0+0j
    iq_imbal24: 0+0j
    iq_imbal25: 0+0j
    iq_imbal26: 0+0j
    iq_imbal27: 0+0j
    iq_imbal28: 0+0j
    iq_imbal29: 0+0j
    iq_imbal3: 0+0j
    iq_imbal30: 0+0j
    iq_imbal31: 0+0j
    iq_imbal4: 0+0j
    iq_imbal5: 0+0j
    iq_imbal6: 0+0j
    iq_imbal7: 0+0j
    iq_imbal8: 0+0j
    iq_imbal9: 0+0j
    iq_imbal_enb0: default
    iq_imbal_enb1: default
    iq_imbal_enb10: default
    iq_imbal_enb11: default
    iq_imbal_enb12: default
    iq_imbal_enb13: default
    iq_imbal_enb14: default
    iq_imbal_enb15: default
    iq_imbal_enb16: default
    iq_imbal_enb17: default
    iq_imbal_enb18: default
    iq_imbal_enb19: default
    iq_imbal_enb2: default
    iq_imbal_enb20: default
    iq_imbal_enb21: default
    iq_imbal_enb22: default
    iq_imbal_enb23: default
    iq_imbal_enb24: default
    iq_imbal_enb25: default
    iq_imbal_enb26: default
    iq_imbal_enb27: default
    iq_imbal_enb28: default
    iq_imbal_enb29: default
    iq_imbal_enb3: default
    iq_imbal_enb30: default
    iq_imbal_enb31: default
    iq_imbal_enb4: default
    iq_imbal_enb5: default
    iq_imbal_enb6: default
    iq_imbal_enb7: default
    iq_imbal_enb8: default
    iq_imbal_enb9: default
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    otw: ''
    rx_agc0: Default
    rx_agc1: Default
    rx_agc10: Default
    rx_agc11: Default
    rx_agc12: Default
    rx_agc13: Default
    rx_agc14: Default
    rx_agc15: Default
    rx_agc16: Default
    rx_agc17: Default
    rx_agc18: Default
    rx_agc19: Default
    rx_agc2: Default
    rx_agc20: Default
    rx_agc21: Default
    rx_agc22: Default
    rx_agc23: Default
    rx_agc24: Default
    rx_agc25: Default
    rx_agc26: Default
    rx_agc27: Default
    rx_agc28: Default
    rx_agc29: Default
    rx_agc3: Default
    rx_agc30: Default
    rx_agc31: Default
    rx_agc4: Default
    rx_agc5: Default
    rx_agc6: Default
    rx_agc7: Default
    rx_agc8: Default
    rx_agc9: Default
    samp_rate: samp_rate
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [88, 244.0]
    rotation: 0
    state: true

connections:
- [epy_block_0, '0', qtgui_number_sink_0, '0']
- [low_pass_filter_0, '0', qtgui_sink_x_0, '0']
- [uhd_usrp_source_0, '0', low_pass_filter_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.7.0
